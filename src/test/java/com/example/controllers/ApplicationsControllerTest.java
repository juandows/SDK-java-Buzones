/*
 * APIBuzonesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.example.controllers;

import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import com.example.models.*;
import com.example.exceptions.*;
import com.example.APIHelper;
import com.example.DateTimeHelper;
import com.example.Configuration;
import com.example.testing.TestHelper;
import com.example.controllers.ApplicationsController;

import com.fasterxml.jackson.core.type.TypeReference;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;

public class ApplicationsControllerTest extends ControllerTestBase {
    
    /**
     * Controller instance (for all tests)
     */
    private static ApplicationsController controller;
    
    /**
     * Setup test class
     */
    @BeforeClass
    public static void setUpClass() {
        controller = getClient().getApplications();
    }

    /**
     * Tear down test class
     * @throws IOException
     */
    @AfterClass
    public static void tearDownClass() throws IOException {
        controller = null;
    }

    /**
     * Crea un nuevo mensaje en los buzones de los usuarios(group) de la aplicaci√≥n (iris2).
     * @throws Throwable
     */
    @Test
    public void testCrearUnMensajeAAplicaciN1() throws Throwable {
        // Parameters for the API call
        String token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTc5Mzk5NDd9.-pLDemUYmYPpjG5CZ7VI7UUBcC8mC_KAbEyNpzHsTMw";
        CrearUnMensajeAAplicaciNRequest body = APIHelper.deserialize("
{

  \"leido\": false,

  \"borrado\": false,

  \"data\":{

    \"type\" : \"recogidas_pendientes\",

    \"numero\" : 7

  }

}", new TypeReference<CrearUnMensajeAAplicaciNRequest>(){});
        String contentType = "application/json";

        // Set callback and perform API call
        CrearUnMensajeAAplicaciNResponse result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.createApplicationsIris2MessagesPost(token, body, contentType);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "\n{\n\n\n\"data\":\n\n        {\n\n            \"id\": \"123456\",\n\n            \"leido\": false,\n\n            \"borrado\": false,\n\n            \"fecha\": \"2017-10-20T15:59:45.000Z\",\n\n            \"data\": {\n\n                \"type\": \"incidencias_pregunta\",\n\n                \"referencia\": \"123456789\"\n\n            }\n\n        }\n\n}\n", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

    /**
     * Devuelve todas las aplicaciones que tienen mensajes.
     * @throws Throwable
     */
    @Test
    public void testLeerAplicaciones1() throws Throwable {
        // Parameters for the API call
        String token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTY4NzUwMDN9.2Eo8_bhTyLVywxi4P2zTSQ86WLXwCMdneJdmygeClaw";

        // Set callback and perform API call
        LeerAplicacionesResponse result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getApplicationsGet(token);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "\n{\n\n    \"data\":    [\n\n        {\"id\":\"iris2\", \"id\":\"portal\"}    \n\n    ]\n\n}", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

}
