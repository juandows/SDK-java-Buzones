/*
 * APIBuzonesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.example.controllers;

import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import com.example.models.*;
import com.example.exceptions.*;
import com.example.APIHelper;
import com.example.DateTimeHelper;
import com.example.Configuration;
import com.example.testing.TestHelper;
import com.example.controllers.MessagesController;

import com.fasterxml.jackson.core.type.TypeReference;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;

public class MessagesControllerTest extends ControllerTestBase {
    
    /**
     * Controller instance (for all tests)
     */
    private static MessagesController controller;
    
    /**
     * Setup test class
     */
    @BeforeClass
    public static void setUpClass() {
        controller = getClient().getMessages();
    }

    /**
     * Tear down test class
     * @throws IOException
     */
    @AfterClass
    public static void tearDownClass() throws IOException {
        controller = null;
    }

    /**
     * TODO: Add Description
     * @throws Throwable
     */
    @Test
    public void testUnnammedEndpoint11() throws Throwable {

        // Set callback and perform API call
        controller.setHttpCallBack(httpResponse);
        try {
        controller.getUnnammedEndpointGet();
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

    }

    /**
     * Modifica uno o variso de los campos: borrado, leido o consultado.
     * @throws Throwable
     */
    @Test
    public void testModificarUnMensajeLeidoBorrado1() throws Throwable {
        // Parameters for the API call
        String token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiJ1c2VyLl9pZCIsInVzZXJuYW1lIjoidXNlci51c2VybmFtZSIsImFkbWluIjoidXNlci5hZG1pbiIsImlhdCI6MTUxMzg0NTg2MywiZXhwIjoxNTE0NDUwNjYzLCJpc3MiOiJyZWR5c2VyLmNvbSIsInN1YiI6InVzZXJJbmZvIn0.tZTpGJa9o0jsjxJNeuiREquYDiskr3dkfCDPpsewwk8";
        ModificarUnMensajeLeidoBorradoRequest body = APIHelper.deserialize("
{

    \"leido\": true,

    \"borrado\": false

}", new TypeReference<ModificarUnMensajeLeidoBorradoRequest>(){});
        String contentType = "application/json";

        // Set callback and perform API call
        ModificarUnMensajeLeidoBorradoResponse result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.updateApplicationsIris2BoxesJuandeMcMessages5a0d6278c1371500112e5ddePatch(token, body, contentType);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "\n{\n\n    \"data\": {\n\n        \"id\": \"123456\",\n\n        \"leido\": true,\n\n        \"borrado\": false,\n\n        \"fecha\": \"2017-10-20T15:59:45.000Z\",\n\n        \"data\": {\n\n            \"type\": \"incidencias_pregunta\",\n\n            \"referencia\": \"123456789\"\n\n        }\n\n    }\n\n}", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

    /**
     * Devuelve el mensaje (123456) del buzón (juande.mc) de la aplicación (iris2).
     * @throws Throwable
     */
    @Test
    public void testLeerUnMensaje1() throws Throwable {
        // Parameters for the API call
        String token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiJ1c2VyLl9pZCIsInVzZXJuYW1lIjoidXNlci51c2VybmFtZSIsImFkbWluIjoidXNlci5hZG1pbiIsImlhdCI6MTUxMzg0NTg2MywiZXhwIjoxNTE0NDUwNjYzLCJpc3MiOiJyZWR5c2VyLmNvbSIsInN1YiI6InVzZXJJbmZvIn0.tZTpGJa9o0jsjxJNeuiREquYDiskr3dkfCDPpsewwk8";

        // Set callback and perform API call
        LeerUnMensajeResponse result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getApplicationsIris2BoxesJuandeMcMessages5a0d6278c1371500112e5ddeGet(token);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "\n{\n\n    \"data\":{\n\n        \"id\": \"123456\",\n\n    \"leido\": false,\n\n    \"borrado\": false,\n\n    \"fecha\": \"2017-10-20T15:59:45.000Z\",\n\n    \"data\": {\n\n        \"type\": \"incidencias_pregunta\",\n\n        \"referencia\": \"123456789\"\n\n    }\n\n    }\n\n}", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

    /**
     * Crea un nuevo mensaje en el buzón (juande.mc) de la aplicación (iris2).
     * @throws Throwable
     */
    @Test
    public void testCrearUnMensaje1() throws Throwable {
        // Parameters for the API call
        String token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTg2MDM2NjF9.z_F1iok_-d4RTtjoGzUYFYC1V7DTtP339nofkaA_Y7Y";
        CrearUnMensajeRequest body = APIHelper.deserialize("
{

    \"leido\": false,

    \"borrado\": false,

    \"data\":{

        \"type\" : \"url\",

        \"url\" : \"http://www.redyser.com\"

    },

    \"expireAt\": \"2018-03-12T08:05:57.982Z\"

}", new TypeReference<CrearUnMensajeRequest>(){});
        String contentType = "application/json";

        // Set callback and perform API call
        CrearUnMensajeResponse result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.createApplicationsIris2BoxesJUANDEMCMessagesPost(token, body, contentType);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "\n{\n\n\n\"data\":\n\n        {\n\n            \"id\": \"123456\",\n\n            \"leido\": false,\n\n            \"borrado\": false,\n\n            \"fecha\": \"2017-10-20T15:59:45.000Z\",\n\n            \"data\": {\n\n                \"type\": \"incidencias_pregunta\",\n\n                \"referencia\": \"123456789\"\n\n            }\n\n        }\n\n}\n", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

    /**
     * 
Devuelve todos los mensajes del buzón (juande.mc) de la aplicación (iris2). Acepta parametros en la url:


borrado: true/false


leido: true/false


fecha: mensajes desde esa fecha (ej.-2017-01-21)


skip: se salta ese número de documentos


limit: número documentos máximo que devolverá


order: (fecha/-fecha), ordena por ese campo
     * @throws Throwable
     */
    @Test
    public void testLeerMensajes1() throws Throwable {
        // Parameters for the API call
        boolean borrado = false;
        DateTime fecha = DateTimeHelper.fromRfc8601DateTime("2017-11-15");
        int limit = 20;
        int skip = 0;
        String order = "-fecha";
        String token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1MTgwNzg2MjF9.P1Jry3Mu1g4xaHhUsE7cYtTkczeg5mup3E5uKPUP0Ps";
        String contentType = "application/json";

        // Set callback and perform API call
        LeerMensajesResponse result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getApplicationsIris2BoxesJUANDEMCMessagesGet(borrado, fecha, limit, skip, order, token, contentType);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "\n{\n\n    \"data\": [\n\n        {\n\n            \"id\": \"123456\",\n\n            \"leido\": false,\n\n            \"borrado\": false,\n\n            \"fecha\": \"2017-10-20T15:59:45.000Z\",\n\n            \"data\": {\n\n                \"type\": \"incidencias_pregunta\",\n\n                \"referencia\": \"123456789\"\n\n            }\n\n        },\n\n        {\n\n            \"id\": \"123457\",\n\n            \"leido\": false,\n\n            \"borrado\": false,\n\n            \"fecha\": \"2017-10-20T16:59:45.000Z\",\n\n            \"data\": {\n\n                \"type\": \"incidencias_pregunta\",\n\n                \"referencia\": \"123456789\"\n\n            }\n\n        }\n\n    ]\n\n}", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

}
