/*
 * APIBuzonesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.example.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import org.joda.time.DateTime;

import com.example.*;
import com.example.models.*;
import com.example.exceptions.*;
import com.example.http.client.HttpClient;
import com.example.http.client.HttpContext;
import com.example.http.request.HttpRequest;
import com.example.http.response.HttpResponse;
import com.example.http.response.HttpStringResponse;
import com.example.http.client.APICallBack;
import com.example.controllers.syncwrapper.APICallBackCatcher;

public class MessagesController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static MessagesController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the MessagesController class 
     */
    public static MessagesController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new MessagesController();
            }
        }
        return instance;
    }

    /**
     * TODO: Add Description
     * @return    Returns the void response from the API call 
     */
    public void getUnnammedEndpointGet(
    ) throws Throwable {
        APICallBackCatcher<Object> callback = new APICallBackCatcher<Object>();
        getUnnammedEndpointGetAsync(callback);
        if(!callback.isSuccess())
            throw callback.getError();
        callback.getResult();
    }

    /**
     * TODO: Add Description
     * @return    Returns the void response from the API call 
     */
    public void getUnnammedEndpointGetAsync(
                final APICallBack<Object> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5183715781388269937L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //let the caller know of the success
                            callBack.onSuccess(_context, _context);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Modifica uno o variso de los campos: borrado, leido o consultado.
     * @param    token    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the ModificarUnMensajeLeidoBorradoResponse response from the API call 
     */
    public ModificarUnMensajeLeidoBorradoResponse updateApplicationsIris2BoxesJuandeMcMessages5a0d6278c1371500112e5ddePatch(
                final String token,
                final ModificarUnMensajeLeidoBorradoRequest body,
                final String contentType
    ) throws Throwable {
        APICallBackCatcher<ModificarUnMensajeLeidoBorradoResponse> callback = new APICallBackCatcher<ModificarUnMensajeLeidoBorradoResponse>();
        updateApplicationsIris2BoxesJuandeMcMessages5a0d6278c1371500112e5ddePatchAsync(token, body, contentType, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Modifica uno o variso de los campos: borrado, leido o consultado.
     * @param    token    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void updateApplicationsIris2BoxesJuandeMcMessages5a0d6278c1371500112e5ddePatchAsync(
                final String token,
                final ModificarUnMensajeLeidoBorradoRequest body,
                final String contentType,
                final APICallBack<ModificarUnMensajeLeidoBorradoResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/applications/iris2/boxes/juande.mc/messages/5a0d6278c1371500112e5dde");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4839945502830093595L;
            {
                    put( "token", token );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5004249635496614288L;
            {
                    put( "Content-Type", contentType );
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(body));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ModificarUnMensajeLeidoBorradoResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ModificarUnMensajeLeidoBorradoResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Devuelve el mensaje (123456) del buzón (juande.mc) de la aplicación (iris2).
     * @param    token    Required parameter: Example: 
     * @return    Returns the LeerUnMensajeResponse response from the API call 
     */
    public LeerUnMensajeResponse getApplicationsIris2BoxesJuandeMcMessages5a0d6278c1371500112e5ddeGet(
                final String token
    ) throws Throwable {
        APICallBackCatcher<LeerUnMensajeResponse> callback = new APICallBackCatcher<LeerUnMensajeResponse>();
        getApplicationsIris2BoxesJuandeMcMessages5a0d6278c1371500112e5ddeGetAsync(token, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Devuelve el mensaje (123456) del buzón (juande.mc) de la aplicación (iris2).
     * @param    token    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void getApplicationsIris2BoxesJuandeMcMessages5a0d6278c1371500112e5ddeGetAsync(
                final String token,
                final APICallBack<LeerUnMensajeResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/applications/iris2/boxes/juande.mc/messages/5a0d6278c1371500112e5dde");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5390646828930319701L;
            {
                    put( "token", token );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4671250435063612711L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            LeerUnMensajeResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<LeerUnMensajeResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Crea un nuevo mensaje en el buzón (juande.mc) de la aplicación (iris2).
     * @param    token    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the CrearUnMensajeResponse response from the API call 
     */
    public CrearUnMensajeResponse createApplicationsIris2BoxesJUANDEMCMessagesPost(
                final String token,
                final CrearUnMensajeRequest body,
                final String contentType
    ) throws Throwable {
        APICallBackCatcher<CrearUnMensajeResponse> callback = new APICallBackCatcher<CrearUnMensajeResponse>();
        createApplicationsIris2BoxesJUANDEMCMessagesPostAsync(token, body, contentType, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Crea un nuevo mensaje en el buzón (juande.mc) de la aplicación (iris2).
     * @param    token    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createApplicationsIris2BoxesJUANDEMCMessagesPostAsync(
                final String token,
                final CrearUnMensajeRequest body,
                final String contentType,
                final APICallBack<CrearUnMensajeResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/applications/iris2/boxes/JUANDE.MC/messages");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5554963090820254478L;
            {
                    put( "token", token );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5177718131060348282L;
            {
                    put( "Content-Type", contentType );
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            CrearUnMensajeResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<CrearUnMensajeResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Devuelve todos los mensajes del buzón (juande.mc) de la aplicación (iris2). Acepta parametros en la url:
     * borrado: true/false
     * leido: true/false
     * fecha: mensajes desde esa fecha (ej.-2017-01-21)
     * skip: se salta ese número de documentos
     * limit: número documentos máximo que devolverá
     * order: (fecha/-fecha), ordena por ese campo
     * @param    borrado    Required parameter: Example: 
     * @param    fecha    Required parameter: Example: 
     * @param    limit    Required parameter: Example: 
     * @param    skip    Required parameter: Example: 
     * @param    order    Required parameter: Example: 
     * @param    token    Required parameter: Example: 
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the LeerMensajesResponse response from the API call 
     */
    public LeerMensajesResponse getApplicationsIris2BoxesJUANDEMCMessagesGet(
                final boolean borrado,
                final DateTime fecha,
                final int limit,
                final int skip,
                final String order,
                final String token,
                final String contentType
    ) throws Throwable {
        APICallBackCatcher<LeerMensajesResponse> callback = new APICallBackCatcher<LeerMensajesResponse>();
        getApplicationsIris2BoxesJUANDEMCMessagesGetAsync(borrado, fecha, limit, skip, order, token, contentType, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Devuelve todos los mensajes del buzón (juande.mc) de la aplicación (iris2). Acepta parametros en la url:
     * borrado: true/false
     * leido: true/false
     * fecha: mensajes desde esa fecha (ej.-2017-01-21)
     * skip: se salta ese número de documentos
     * limit: número documentos máximo que devolverá
     * order: (fecha/-fecha), ordena por ese campo
     * @param    borrado    Required parameter: Example: 
     * @param    fecha    Required parameter: Example: 
     * @param    limit    Required parameter: Example: 
     * @param    skip    Required parameter: Example: 
     * @param    order    Required parameter: Example: 
     * @param    token    Required parameter: Example: 
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void getApplicationsIris2BoxesJUANDEMCMessagesGetAsync(
                final boolean borrado,
                final DateTime fecha,
                final int limit,
                final int skip,
                final String order,
                final String token,
                final String contentType,
                final APICallBack<LeerMensajesResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/applications/iris2/boxes/JUANDE.MC/messages");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4746922893323615170L;
            {
                    put( "borrado", borrado );
                    put( "fecha", DateTimeHelper.toRfc8601DateTime(fecha) );
                    put( "limit", limit );
                    put( "skip", skip );
                    put( "order", order );
                    put( "token", token );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5687790390795605881L;
            {
                    put( "Content-Type", contentType );
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            LeerMensajesResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<LeerMensajesResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}