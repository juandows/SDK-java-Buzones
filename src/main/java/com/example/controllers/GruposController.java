/*
 * APIBuzonesLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.example.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import org.joda.time.DateTime;

import com.example.*;
import com.example.models.*;
import com.example.exceptions.*;
import com.example.http.client.HttpClient;
import com.example.http.client.HttpContext;
import com.example.http.request.HttpRequest;
import com.example.http.response.HttpResponse;
import com.example.http.response.HttpStringResponse;
import com.example.http.client.APICallBack;
import com.example.controllers.syncwrapper.APICallBackCatcher;

public class GruposController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static GruposController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the GruposController class 
     */
    public static GruposController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new GruposController();
            }
        }
        return instance;
    }

    /**
     * Crea un nuevo mensaje en los buzones de los usuarios(group) de la aplicación (iris2).
     * @param    token    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the CrearUnMensajeAlGrupoPorNombreResponse response from the API call 
     */
    public CrearUnMensajeAlGrupoPorNombreResponse createGroups5a564715825d4f0e94946c1aApplicationsIris2MessagesPost2(
                final String token,
                final CrearUnMensajeAlGrupoPorNombreRequest body,
                final String contentType
    ) throws Throwable {
        APICallBackCatcher<CrearUnMensajeAlGrupoPorNombreResponse> callback = new APICallBackCatcher<CrearUnMensajeAlGrupoPorNombreResponse>();
        createGroups5a564715825d4f0e94946c1aApplicationsIris2MessagesPost2Async(token, body, contentType, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Crea un nuevo mensaje en los buzones de los usuarios(group) de la aplicación (iris2).
     * @param    token    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createGroups5a564715825d4f0e94946c1aApplicationsIris2MessagesPost2Async(
                final String token,
                final CrearUnMensajeAlGrupoPorNombreRequest body,
                final String contentType,
                final APICallBack<CrearUnMensajeAlGrupoPorNombreResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/groups/5a564715825d4f0e94946c1a/applications/iris2/messages");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5093149931024892519L;
            {
                    put( "token", token );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5597853914864878910L;
            {
                    put( "Content-Type", contentType );
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            CrearUnMensajeAlGrupoPorNombreResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<CrearUnMensajeAlGrupoPorNombreResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Modifica uno o variso de los campos.
     * @param    token    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the ModificarUnGrupoPorNombreResponse response from the API call 
     */
    public ModificarUnGrupoPorNombreResponse updateGroupsApplicationsIris2GroupnameTodosPatch(
                final String token,
                final ModificarUnGrupoPorNombreRequest body,
                final String contentType
    ) throws Throwable {
        APICallBackCatcher<ModificarUnGrupoPorNombreResponse> callback = new APICallBackCatcher<ModificarUnGrupoPorNombreResponse>();
        updateGroupsApplicationsIris2GroupnameTodosPatchAsync(token, body, contentType, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Modifica uno o variso de los campos.
     * @param    token    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void updateGroupsApplicationsIris2GroupnameTodosPatchAsync(
                final String token,
                final ModificarUnGrupoPorNombreRequest body,
                final String contentType,
                final APICallBack<ModificarUnGrupoPorNombreResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/groups/applications/iris2/groupname/todos");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4927394990556376435L;
            {
                    put( "token", token );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4698369271671112072L;
            {
                    put( "Content-Type", contentType );
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(body));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ModificarUnGrupoPorNombreResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ModificarUnGrupoPorNombreResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Devuelve el grupo (123456).
     * @param    token    Required parameter: Example: 
     * @return    Returns the LeerUnGrupoPorNombreResponse response from the API call 
     */
    public LeerUnGrupoPorNombreResponse getGroupsApplicationsIris2GroupnameTodosGet(
                final String token
    ) throws Throwable {
        APICallBackCatcher<LeerUnGrupoPorNombreResponse> callback = new APICallBackCatcher<LeerUnGrupoPorNombreResponse>();
        getGroupsApplicationsIris2GroupnameTodosGetAsync(token, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Devuelve el grupo (123456).
     * @param    token    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void getGroupsApplicationsIris2GroupnameTodosGetAsync(
                final String token,
                final APICallBack<LeerUnGrupoPorNombreResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/groups/applications/iris2/groupname/todos");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4718418218000095097L;
            {
                    put( "token", token );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 4843718129358904767L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            LeerUnGrupoPorNombreResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<LeerUnGrupoPorNombreResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Modifica uno o variso de los campos.
     * @param    token    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the ModificarUnGrupoResponse response from the API call 
     */
    public ModificarUnGrupoResponse updateGroups5a564715825d4f0e94946c1aPatch(
                final String token,
                final ModificarUnGrupoRequest body,
                final String contentType
    ) throws Throwable {
        APICallBackCatcher<ModificarUnGrupoResponse> callback = new APICallBackCatcher<ModificarUnGrupoResponse>();
        updateGroups5a564715825d4f0e94946c1aPatchAsync(token, body, contentType, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Modifica uno o variso de los campos.
     * @param    token    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void updateGroups5a564715825d4f0e94946c1aPatchAsync(
                final String token,
                final ModificarUnGrupoRequest body,
                final String contentType,
                final APICallBack<ModificarUnGrupoResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/groups/5a564715825d4f0e94946c1a");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5384728171873406211L;
            {
                    put( "token", token );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5047398626385469438L;
            {
                    put( "Content-Type", contentType );
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(body));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ModificarUnGrupoResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ModificarUnGrupoResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Devuelve todos los grupos de la aplicación. Acepta parametros en la url:
     * skip: se salta ese número de documentos
     * limit: número documentos máximo que devolverá
     * @param    borrado    Required parameter: Example: 
     * @param    fecha    Required parameter: Example: 
     * @param    limit    Required parameter: Example: 
     * @param    skip    Required parameter: Example: 
     * @param    token    Required parameter: Example: 
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the LeerGruposDeUnaAplicacionResponse response from the API call 
     */
    public LeerGruposDeUnaAplicacionResponse getGroupsApplicationsIris2Get(
                final boolean borrado,
                final DateTime fecha,
                final int limit,
                final int skip,
                final String token,
                final String contentType
    ) throws Throwable {
        APICallBackCatcher<LeerGruposDeUnaAplicacionResponse> callback = new APICallBackCatcher<LeerGruposDeUnaAplicacionResponse>();
        getGroupsApplicationsIris2GetAsync(borrado, fecha, limit, skip, token, contentType, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Devuelve todos los grupos de la aplicación. Acepta parametros en la url:
     * skip: se salta ese número de documentos
     * limit: número documentos máximo que devolverá
     * @param    borrado    Required parameter: Example: 
     * @param    fecha    Required parameter: Example: 
     * @param    limit    Required parameter: Example: 
     * @param    skip    Required parameter: Example: 
     * @param    token    Required parameter: Example: 
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void getGroupsApplicationsIris2GetAsync(
                final boolean borrado,
                final DateTime fecha,
                final int limit,
                final int skip,
                final String token,
                final String contentType,
                final APICallBack<LeerGruposDeUnaAplicacionResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/groups/applications/iris2");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 4729363541524172180L;
            {
                    put( "borrado", borrado );
                    put( "fecha", DateTimeHelper.toRfc8601DateTime(fecha) );
                    put( "limit", limit );
                    put( "skip", skip );
                    put( "token", token );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5566818855944344257L;
            {
                    put( "Content-Type", contentType );
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            LeerGruposDeUnaAplicacionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<LeerGruposDeUnaAplicacionResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Devuelve el grupo (123456).
     * @param    token    Required parameter: Example: 
     * @return    Returns the LeerUnGrupoResponse response from the API call 
     */
    public LeerUnGrupoResponse getGroups5a564715825d4f0e94946c1aGet(
                final String token
    ) throws Throwable {
        APICallBackCatcher<LeerUnGrupoResponse> callback = new APICallBackCatcher<LeerUnGrupoResponse>();
        getGroups5a564715825d4f0e94946c1aGetAsync(token, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Devuelve el grupo (123456).
     * @param    token    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void getGroups5a564715825d4f0e94946c1aGetAsync(
                final String token,
                final APICallBack<LeerUnGrupoResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/groups/5a564715825d4f0e94946c1a");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5568120640818380649L;
            {
                    put( "token", token );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5667501198261965492L;
            {
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            LeerUnGrupoResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<LeerUnGrupoResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Crea un nuevo grupo.
     * @param    token    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the CrearUnGrupoResponse response from the API call 
     */
    public CrearUnGrupoResponse createGroupsPost(
                final String token,
                final CrearUnGrupoRequest body,
                final String contentType
    ) throws Throwable {
        APICallBackCatcher<CrearUnGrupoResponse> callback = new APICallBackCatcher<CrearUnGrupoResponse>();
        createGroupsPostAsync(token, body, contentType, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Crea un nuevo grupo.
     * @param    token    Required parameter: Example: 
     * @param    body    Required parameter: Example: 
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createGroupsPostAsync(
                final String token,
                final CrearUnGrupoRequest body,
                final String contentType,
                final APICallBack<CrearUnGrupoResponse> callBack
    ) throws JsonProcessingException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/groups");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5074190292203411567L;
            {
                    put( "token", token );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5078031798446760678L;
            {
                    put( "Content-Type", contentType );
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            CrearUnGrupoResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<CrearUnGrupoResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Devuelve todos los grupos. Acepta parametros en la url:
     * skip: se salta ese número de documentos
     * limit: número documentos máximo que devolverá
     * @param    borrado    Required parameter: Example: 
     * @param    fecha    Required parameter: Example: 
     * @param    limit    Required parameter: Example: 
     * @param    skip    Required parameter: Example: 
     * @param    token    Required parameter: Example: 
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the LeerGruposResponse response from the API call 
     */
    public LeerGruposResponse getGroupsGet(
                final boolean borrado,
                final DateTime fecha,
                final int limit,
                final int skip,
                final String token,
                final String contentType
    ) throws Throwable {
        APICallBackCatcher<LeerGruposResponse> callback = new APICallBackCatcher<LeerGruposResponse>();
        getGroupsGetAsync(borrado, fecha, limit, skip, token, contentType, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Devuelve todos los grupos. Acepta parametros en la url:
     * skip: se salta ese número de documentos
     * limit: número documentos máximo que devolverá
     * @param    borrado    Required parameter: Example: 
     * @param    fecha    Required parameter: Example: 
     * @param    limit    Required parameter: Example: 
     * @param    skip    Required parameter: Example: 
     * @param    token    Required parameter: Example: 
     * @param    contentType    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void getGroupsGetAsync(
                final boolean borrado,
                final DateTime fecha,
                final int limit,
                final int skip,
                final String token,
                final String contentType,
                final APICallBack<LeerGruposResponse> callBack
    ) {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;
        
        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri);
        _queryBuilder.append("/groups");

        //process query parameters
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5380392863690586618L;
            {
                    put( "borrado", borrado );
                    put( "fecha", DateTimeHelper.toRfc8601DateTime(fecha) );
                    put( "limit", limit );
                    put( "skip", skip );
                    put( "token", token );
            }});
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>() {
            private static final long serialVersionUID = 5043379094730231024L;
            {
                    put( "Content-Type", contentType );
                    put( "user-agent", "APIMATIC 2.0" );
                    put( "accept", "application/json" );
            }
        };

        //prepare and invoke the API call request to fetch the response
        final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

        //invoke the callback before request if its not null
        if (getHttpCallBack() != null)
        {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        //invoke request and get response
        Runnable _responseTask = new Runnable() {
            public void run() {
                //make the API call
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            LeerGruposResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<LeerGruposResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}